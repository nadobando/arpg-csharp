/*
 * FastAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using com.arpg.api.Client;
using com.arpg.api.Client.Auth;
using com.arpg.api.Model;

namespace com.arpg.api.arpg
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Users:Current User
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserRead</returns>
        UserRead UsersCurrentUserUsersMeGet(int operationIndex = 0);

        /// <summary>
        /// Users:Current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserRead</returns>
        ApiResponse<UserRead> UsersCurrentUserUsersMeGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Users:Delete User
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UsersDeleteUserUsersIdDelete(string id, int operationIndex = 0);

        /// <summary>
        /// Users:Delete User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UsersDeleteUserUsersIdDeleteWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Users:Patch Current User
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserRead</returns>
        UserRead UsersPatchCurrentUserUsersMePatch(UserUpdate userUpdate, int operationIndex = 0);

        /// <summary>
        /// Users:Patch Current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserRead</returns>
        ApiResponse<UserRead> UsersPatchCurrentUserUsersMePatchWithHttpInfo(UserUpdate userUpdate, int operationIndex = 0);
        /// <summary>
        /// Users:Patch User
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserRead</returns>
        UserRead UsersPatchUserUsersIdPatch(string id, UserUpdate userUpdate, int operationIndex = 0);

        /// <summary>
        /// Users:Patch User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserRead</returns>
        ApiResponse<UserRead> UsersPatchUserUsersIdPatchWithHttpInfo(string id, UserUpdate userUpdate, int operationIndex = 0);
        /// <summary>
        /// Users:User
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserRead</returns>
        UserRead UsersUserUsersIdGet(string id, int operationIndex = 0);

        /// <summary>
        /// Users:User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserRead</returns>
        ApiResponse<UserRead> UsersUserUsersIdGetWithHttpInfo(string id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Users:Current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserRead</returns>
        System.Threading.Tasks.Task<UserRead> UsersCurrentUserUsersMeGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Users:Current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserRead)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserRead>> UsersCurrentUserUsersMeGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Users:Delete User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersDeleteUserUsersIdDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Users:Delete User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UsersDeleteUserUsersIdDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Users:Patch Current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserRead</returns>
        System.Threading.Tasks.Task<UserRead> UsersPatchCurrentUserUsersMePatchAsync(UserUpdate userUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Users:Patch Current User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserRead)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserRead>> UsersPatchCurrentUserUsersMePatchWithHttpInfoAsync(UserUpdate userUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Users:Patch User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserRead</returns>
        System.Threading.Tasks.Task<UserRead> UsersPatchUserUsersIdPatchAsync(string id, UserUpdate userUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Users:Patch User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserRead)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserRead>> UsersPatchUserUsersIdPatchWithHttpInfoAsync(string id, UserUpdate userUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Users:User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserRead</returns>
        System.Threading.Tasks.Task<UserRead> UsersUserUsersIdGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Users:User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserRead)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserRead>> UsersUserUsersIdGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private com.arpg.api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(string basePath)
        {
            this.Configuration = com.arpg.api.Client.Configuration.MergeConfigurations(
                com.arpg.api.Client.GlobalConfiguration.Instance,
                new com.arpg.api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new com.arpg.api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.arpg.api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = com.arpg.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(com.arpg.api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = com.arpg.api.Client.Configuration.MergeConfigurations(
                com.arpg.api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new com.arpg.api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new com.arpg.api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = com.arpg.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(com.arpg.api.Client.ISynchronousClient client, com.arpg.api.Client.IAsynchronousClient asyncClient, com.arpg.api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = com.arpg.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public com.arpg.api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public com.arpg.api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public com.arpg.api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public com.arpg.api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Users:Current User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserRead</returns>
        public UserRead UsersCurrentUserUsersMeGet(int operationIndex = 0)
        {
            com.arpg.api.Client.ApiResponse<UserRead> localVarResponse = UsersCurrentUserUsersMeGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Users:Current User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserRead</returns>
        public com.arpg.api.Client.ApiResponse<UserRead> UsersCurrentUserUsersMeGetWithHttpInfo(int operationIndex = 0)
        {
            com.arpg.api.Client.RequestOptions localVarRequestOptions = new com.arpg.api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.arpg.api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.arpg.api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.UsersCurrentUserUsersMeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserRead>("/users/me", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersCurrentUserUsersMeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Users:Current User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserRead</returns>
        public async System.Threading.Tasks.Task<UserRead> UsersCurrentUserUsersMeGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.arpg.api.Client.ApiResponse<UserRead> localVarResponse = await UsersCurrentUserUsersMeGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Users:Current User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserRead)</returns>
        public async System.Threading.Tasks.Task<com.arpg.api.Client.ApiResponse<UserRead>> UsersCurrentUserUsersMeGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            com.arpg.api.Client.RequestOptions localVarRequestOptions = new com.arpg.api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.arpg.api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.arpg.api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.UsersCurrentUserUsersMeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserRead>("/users/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersCurrentUserUsersMeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Users:Delete User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UsersDeleteUserUsersIdDelete(string id, int operationIndex = 0)
        {
            UsersDeleteUserUsersIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Users:Delete User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public com.arpg.api.Client.ApiResponse<Object> UsersDeleteUserUsersIdDeleteWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new com.arpg.api.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersDeleteUserUsersIdDelete");
            }

            com.arpg.api.Client.RequestOptions localVarRequestOptions = new com.arpg.api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.arpg.api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.arpg.api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", com.arpg.api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.UsersDeleteUserUsersIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersDeleteUserUsersIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Users:Delete User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersDeleteUserUsersIdDeleteAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UsersDeleteUserUsersIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Users:Delete User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<com.arpg.api.Client.ApiResponse<Object>> UsersDeleteUserUsersIdDeleteWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new com.arpg.api.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersDeleteUserUsersIdDelete");
            }


            com.arpg.api.Client.RequestOptions localVarRequestOptions = new com.arpg.api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.arpg.api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.arpg.api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", com.arpg.api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.UsersDeleteUserUsersIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersDeleteUserUsersIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Users:Patch Current User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserRead</returns>
        public UserRead UsersPatchCurrentUserUsersMePatch(UserUpdate userUpdate, int operationIndex = 0)
        {
            com.arpg.api.Client.ApiResponse<UserRead> localVarResponse = UsersPatchCurrentUserUsersMePatchWithHttpInfo(userUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Users:Patch Current User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserRead</returns>
        public com.arpg.api.Client.ApiResponse<UserRead> UsersPatchCurrentUserUsersMePatchWithHttpInfo(UserUpdate userUpdate, int operationIndex = 0)
        {
            // verify the required parameter 'userUpdate' is set
            if (userUpdate == null)
            {
                throw new com.arpg.api.Client.ApiException(400, "Missing required parameter 'userUpdate' when calling UsersApi->UsersPatchCurrentUserUsersMePatch");
            }

            com.arpg.api.Client.RequestOptions localVarRequestOptions = new com.arpg.api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.arpg.api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.arpg.api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userUpdate;

            localVarRequestOptions.Operation = "UsersApi.UsersPatchCurrentUserUsersMePatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UserRead>("/users/me", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersPatchCurrentUserUsersMePatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Users:Patch Current User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserRead</returns>
        public async System.Threading.Tasks.Task<UserRead> UsersPatchCurrentUserUsersMePatchAsync(UserUpdate userUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.arpg.api.Client.ApiResponse<UserRead> localVarResponse = await UsersPatchCurrentUserUsersMePatchWithHttpInfoAsync(userUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Users:Patch Current User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserRead)</returns>
        public async System.Threading.Tasks.Task<com.arpg.api.Client.ApiResponse<UserRead>> UsersPatchCurrentUserUsersMePatchWithHttpInfoAsync(UserUpdate userUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userUpdate' is set
            if (userUpdate == null)
            {
                throw new com.arpg.api.Client.ApiException(400, "Missing required parameter 'userUpdate' when calling UsersApi->UsersPatchCurrentUserUsersMePatch");
            }


            com.arpg.api.Client.RequestOptions localVarRequestOptions = new com.arpg.api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.arpg.api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.arpg.api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = userUpdate;

            localVarRequestOptions.Operation = "UsersApi.UsersPatchCurrentUserUsersMePatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UserRead>("/users/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersPatchCurrentUserUsersMePatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Users:Patch User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserRead</returns>
        public UserRead UsersPatchUserUsersIdPatch(string id, UserUpdate userUpdate, int operationIndex = 0)
        {
            com.arpg.api.Client.ApiResponse<UserRead> localVarResponse = UsersPatchUserUsersIdPatchWithHttpInfo(id, userUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Users:Patch User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserRead</returns>
        public com.arpg.api.Client.ApiResponse<UserRead> UsersPatchUserUsersIdPatchWithHttpInfo(string id, UserUpdate userUpdate, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new com.arpg.api.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersPatchUserUsersIdPatch");
            }

            // verify the required parameter 'userUpdate' is set
            if (userUpdate == null)
            {
                throw new com.arpg.api.Client.ApiException(400, "Missing required parameter 'userUpdate' when calling UsersApi->UsersPatchUserUsersIdPatch");
            }

            com.arpg.api.Client.RequestOptions localVarRequestOptions = new com.arpg.api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.arpg.api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.arpg.api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", com.arpg.api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userUpdate;

            localVarRequestOptions.Operation = "UsersApi.UsersPatchUserUsersIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UserRead>("/users/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersPatchUserUsersIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Users:Patch User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserRead</returns>
        public async System.Threading.Tasks.Task<UserRead> UsersPatchUserUsersIdPatchAsync(string id, UserUpdate userUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.arpg.api.Client.ApiResponse<UserRead> localVarResponse = await UsersPatchUserUsersIdPatchWithHttpInfoAsync(id, userUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Users:Patch User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="userUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserRead)</returns>
        public async System.Threading.Tasks.Task<com.arpg.api.Client.ApiResponse<UserRead>> UsersPatchUserUsersIdPatchWithHttpInfoAsync(string id, UserUpdate userUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new com.arpg.api.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersPatchUserUsersIdPatch");
            }

            // verify the required parameter 'userUpdate' is set
            if (userUpdate == null)
            {
                throw new com.arpg.api.Client.ApiException(400, "Missing required parameter 'userUpdate' when calling UsersApi->UsersPatchUserUsersIdPatch");
            }


            com.arpg.api.Client.RequestOptions localVarRequestOptions = new com.arpg.api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.arpg.api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.arpg.api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", com.arpg.api.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = userUpdate;

            localVarRequestOptions.Operation = "UsersApi.UsersPatchUserUsersIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UserRead>("/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersPatchUserUsersIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Users:User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserRead</returns>
        public UserRead UsersUserUsersIdGet(string id, int operationIndex = 0)
        {
            com.arpg.api.Client.ApiResponse<UserRead> localVarResponse = UsersUserUsersIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Users:User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserRead</returns>
        public com.arpg.api.Client.ApiResponse<UserRead> UsersUserUsersIdGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new com.arpg.api.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersUserUsersIdGet");
            }

            com.arpg.api.Client.RequestOptions localVarRequestOptions = new com.arpg.api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.arpg.api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.arpg.api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", com.arpg.api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.UsersUserUsersIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserRead>("/users/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserUsersIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Users:User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserRead</returns>
        public async System.Threading.Tasks.Task<UserRead> UsersUserUsersIdGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            com.arpg.api.Client.ApiResponse<UserRead> localVarResponse = await UsersUserUsersIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Users:User 
        /// </summary>
        /// <exception cref="com.arpg.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserRead)</returns>
        public async System.Threading.Tasks.Task<com.arpg.api.Client.ApiResponse<UserRead>> UsersUserUsersIdGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new com.arpg.api.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UsersUserUsersIdGet");
            }


            com.arpg.api.Client.RequestOptions localVarRequestOptions = new com.arpg.api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = com.arpg.api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = com.arpg.api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", com.arpg.api.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.UsersUserUsersIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserRead>("/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersUserUsersIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
